-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mp7wrapped_pfalgo3_full is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_4_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_5_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_6_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_7_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_8_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_9_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_10_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_11_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_12_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_13_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_14_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_15_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_16_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_17_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_18_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_19_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_20_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_21_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_22_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_23_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_24_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_25_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_26_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_27_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_28_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_29_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_30_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_31_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_32_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_33_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_34_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_35_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_36_V : IN STD_LOGIC_VECTOR (31 downto 0);
    input_37_V : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_2_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_3_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_4_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_5_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_6_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_7_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_8_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_9_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_10_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_11_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_12_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_13_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_14_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_15_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_16_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_17_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_18_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_19_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_20_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_21_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_22_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_23_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_24_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_25_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_26_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_27_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_28_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_29_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_30_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_31_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_32_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_33_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_34_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_35_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mp7wrapped_pfalgo3_full is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mp7wrapped_pfalgo3_full,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx690tffg1927-2,HLS_INPUT_CLOCK=4.166670,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.940000,HLS_SYN_LAT=78,HLS_SYN_TPT=2,HLS_SYN_MEM=2,HLS_SYN_DSP=170,HLS_SYN_FF=26902,HLS_SYN_LUT=27182}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0_preg : STD_LOGIC := '0';
    signal grp_pfalgo3_full_fu_804_ap_start : STD_LOGIC;
    signal grp_pfalgo3_full_fu_804_ap_done : STD_LOGIC;
    signal grp_pfalgo3_full_fu_804_ap_idle : STD_LOGIC;
    signal grp_pfalgo3_full_fu_804_ap_ready : STD_LOGIC;
    signal grp_pfalgo3_full_fu_804_hadcalo_0_hwIsEM_re : STD_LOGIC;
    signal grp_pfalgo3_full_fu_804_hadcalo_1_hwIsEM_re : STD_LOGIC;
    signal grp_pfalgo3_full_fu_804_hadcalo_2_hwIsEM_re : STD_LOGIC;
    signal grp_pfalgo3_full_fu_804_hadcalo_3_hwIsEM_re : STD_LOGIC;
    signal grp_pfalgo3_full_fu_804_hadcalo_4_hwIsEM_re : STD_LOGIC;
    signal grp_pfalgo3_full_fu_804_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_7 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_8 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_9 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_10 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_11 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_12 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_13 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_14 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_15 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_16 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_17 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_18 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_19 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_20 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_21 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_22 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_23 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_24 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_25 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_26 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_27 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_28 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_29 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_30 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_31 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_32 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_33 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_34 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_35 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_36 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_37 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_38 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_39 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_40 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_41 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_42 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_43 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_44 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_45 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_46 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_47 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_48 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_49 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_50 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_51 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_52 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_53 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_54 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_55 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_56 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_57 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_58 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_59 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_60 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_61 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_62 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_63 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_64 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_65 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_66 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_67 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_68 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_69 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_70 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_71 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_73 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_74 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_75 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_76 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_77 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_78 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_79 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pfalgo3_full_fu_804_ap_return_80 : STD_LOGIC_VECTOR (9 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_10 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_11 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_12 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_13 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_14 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_15 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_16 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_17 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_18 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_19 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_20 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_21 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_22 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_23 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_24 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_25 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_26 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_27 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_28 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_29 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_30 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_31 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_32 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_33 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_34 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_35 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_36 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_37 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_38 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_39 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_40 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_41 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_42 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_43 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_44 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_45 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_46 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_47 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_48 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_49 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_50 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_51 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_52 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_53 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_54 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_55 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_56 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_57 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_58 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_59 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_60 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_61 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_62 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_63 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_64 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_65 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_66 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_67 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_68 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_69 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_70 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_71 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_72 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_73 : STD_LOGIC_VECTOR (9 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_74 : STD_LOGIC_VECTOR (9 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_75 : STD_LOGIC_VECTOR (9 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_76 : STD_LOGIC_VECTOR (9 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_77 : STD_LOGIC_VECTOR (9 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_78 : STD_LOGIC_VECTOR (9 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_79 : STD_LOGIC_VECTOR (9 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_80 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_81 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_82 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_83 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_84 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_85 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_86 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_mp7wrapped_unpack_in_fu_898_ap_return_87 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_grp_pfalgo3_full_fu_804_ap_start : STD_LOGIC;
    signal p_Result_35_i_fu_1742_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_39_i_fu_1755_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Result_35_1_i_fu_1770_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_39_1_i_fu_1783_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Result_35_2_i_fu_1798_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_39_2_i_fu_1811_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Result_35_3_i_fu_1826_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_39_3_i_fu_1839_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Result_35_4_i_fu_1854_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_39_4_i_fu_1867_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Result_35_5_i_fu_1882_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_39_5_i_fu_1895_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Result_35_6_i_fu_1910_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_39_6_i_fu_1923_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Result_41_i_fu_1938_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_43_i_fu_1951_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_41_1_i_fu_1964_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_43_1_i_fu_1977_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_41_2_i_fu_1990_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_43_2_i_fu_2003_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_41_3_i_fu_2016_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_43_3_i_fu_2029_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_41_4_i_fu_2042_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_43_4_i_fu_2055_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_45_i_fu_2068_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_47_i_fu_2081_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_45_1_i_fu_2094_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_47_1_i_fu_2107_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_45_2_i_fu_2120_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_47_2_i_fu_2133_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_45_3_i_fu_2146_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_47_3_i_fu_2159_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_49_i_fu_2172_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_53_i_fu_2185_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Result_49_1_i_fu_2200_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_53_1_i_fu_2213_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_pipeline_idle_pp0 : STD_LOGIC;

    component pfalgo3_full IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        calo_0_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        calo_1_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        calo_2_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        calo_3_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        calo_4_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        calo_0_hwPtErr_V_re : IN STD_LOGIC_VECTOR (15 downto 0);
        calo_1_hwPtErr_V_re : IN STD_LOGIC_VECTOR (15 downto 0);
        calo_2_hwPtErr_V_re : IN STD_LOGIC_VECTOR (15 downto 0);
        calo_3_hwPtErr_V_re : IN STD_LOGIC_VECTOR (15 downto 0);
        calo_4_hwPtErr_V_re : IN STD_LOGIC_VECTOR (15 downto 0);
        calo_0_hwEta_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        calo_1_hwEta_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        calo_2_hwEta_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        calo_3_hwEta_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        calo_4_hwEta_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        calo_0_hwPhi_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        calo_1_hwPhi_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        calo_2_hwPhi_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        calo_3_hwPhi_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        calo_4_hwPhi_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        hadcalo_0_hwPt_V_re : IN STD_LOGIC_VECTOR (15 downto 0);
        hadcalo_1_hwPt_V_re : IN STD_LOGIC_VECTOR (15 downto 0);
        hadcalo_2_hwPt_V_re : IN STD_LOGIC_VECTOR (15 downto 0);
        hadcalo_3_hwPt_V_re : IN STD_LOGIC_VECTOR (15 downto 0);
        hadcalo_4_hwPt_V_re : IN STD_LOGIC_VECTOR (15 downto 0);
        hadcalo_0_hwEta_V_r : IN STD_LOGIC_VECTOR (8 downto 0);
        hadcalo_1_hwEta_V_r : IN STD_LOGIC_VECTOR (8 downto 0);
        hadcalo_2_hwEta_V_r : IN STD_LOGIC_VECTOR (8 downto 0);
        hadcalo_3_hwEta_V_r : IN STD_LOGIC_VECTOR (8 downto 0);
        hadcalo_4_hwEta_V_r : IN STD_LOGIC_VECTOR (8 downto 0);
        hadcalo_0_hwPhi_V_r : IN STD_LOGIC_VECTOR (8 downto 0);
        hadcalo_1_hwPhi_V_r : IN STD_LOGIC_VECTOR (8 downto 0);
        hadcalo_2_hwPhi_V_r : IN STD_LOGIC_VECTOR (8 downto 0);
        hadcalo_3_hwPhi_V_r : IN STD_LOGIC_VECTOR (8 downto 0);
        hadcalo_4_hwPhi_V_r : IN STD_LOGIC_VECTOR (8 downto 0);
        hadcalo_0_hwEmPt_V_s : IN STD_LOGIC_VECTOR (15 downto 0);
        hadcalo_1_hwEmPt_V_s : IN STD_LOGIC_VECTOR (15 downto 0);
        hadcalo_2_hwEmPt_V_s : IN STD_LOGIC_VECTOR (15 downto 0);
        hadcalo_3_hwEmPt_V_s : IN STD_LOGIC_VECTOR (15 downto 0);
        hadcalo_4_hwEmPt_V_s : IN STD_LOGIC_VECTOR (15 downto 0);
        hadcalo_0_hwIsEM_re : IN STD_LOGIC;
        hadcalo_1_hwIsEM_re : IN STD_LOGIC;
        hadcalo_2_hwIsEM_re : IN STD_LOGIC;
        hadcalo_3_hwIsEM_re : IN STD_LOGIC;
        hadcalo_4_hwIsEM_re : IN STD_LOGIC;
        track_0_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        track_1_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        track_2_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        track_3_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        track_4_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        track_5_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        track_6_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        track_0_hwPtErr_V_r : IN STD_LOGIC_VECTOR (15 downto 0);
        track_1_hwPtErr_V_r : IN STD_LOGIC_VECTOR (15 downto 0);
        track_2_hwPtErr_V_r : IN STD_LOGIC_VECTOR (15 downto 0);
        track_3_hwPtErr_V_r : IN STD_LOGIC_VECTOR (15 downto 0);
        track_4_hwPtErr_V_r : IN STD_LOGIC_VECTOR (15 downto 0);
        track_5_hwPtErr_V_r : IN STD_LOGIC_VECTOR (15 downto 0);
        track_6_hwPtErr_V_r : IN STD_LOGIC_VECTOR (15 downto 0);
        track_0_hwEta_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_1_hwEta_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_2_hwEta_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_3_hwEta_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_4_hwEta_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_5_hwEta_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_6_hwEta_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_0_hwPhi_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_1_hwPhi_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_2_hwPhi_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_3_hwPhi_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_4_hwPhi_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_5_hwPhi_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_6_hwPhi_V_rea : IN STD_LOGIC_VECTOR (8 downto 0);
        track_0_hwZ0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        track_1_hwZ0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        track_2_hwZ0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        track_3_hwZ0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        track_4_hwZ0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        track_5_hwZ0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        track_6_hwZ0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        mu_0_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        mu_1_hwPt_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        mu_0_hwPtErr_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        mu_1_hwPtErr_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        mu_0_hwEta_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        mu_1_hwEta_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        mu_0_hwPhi_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        mu_1_hwPhi_V_read : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_33 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_34 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_35 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_36 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_37 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_38 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_39 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_40 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_41 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_42 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_43 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_44 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_45 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_46 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_47 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_48 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_49 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_50 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_51 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_52 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_53 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_54 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_55 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_56 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_57 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_58 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_59 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_60 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_61 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_62 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_63 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_64 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_65 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_66 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_67 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_68 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_69 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_70 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_71 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_72 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_73 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_74 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_75 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_76 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_77 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_78 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_79 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_80 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component mp7wrapped_unpack_in IS
    port (
        data_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_20_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_21_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_22_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_23_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_24_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_25_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_26_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_27_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_28_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_29_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_30_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_31_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_32_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_33_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_34_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_35_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_36_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_37_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_33 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_34 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_35 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_36 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_37 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_38 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_39 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_40 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_41 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_42 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_43 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_44 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_45 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_46 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_47 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_48 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_49 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_50 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_51 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_52 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_53 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_54 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_55 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_56 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_57 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_58 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_59 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_60 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_61 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_62 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_63 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_64 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_65 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_66 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_67 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_68 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_69 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_70 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_71 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_72 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_73 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_74 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_75 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_76 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_77 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_78 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_79 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_80 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_81 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_82 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_83 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_84 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_85 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_86 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_87 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    grp_pfalgo3_full_fu_804 : component pfalgo3_full
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pfalgo3_full_fu_804_ap_start,
        ap_done => grp_pfalgo3_full_fu_804_ap_done,
        ap_idle => grp_pfalgo3_full_fu_804_ap_idle,
        ap_ready => grp_pfalgo3_full_fu_804_ap_ready,
        calo_0_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_0,
        calo_1_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_1,
        calo_2_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_2,
        calo_3_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_3,
        calo_4_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_4,
        calo_0_hwPtErr_V_re => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_5,
        calo_1_hwPtErr_V_re => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_6,
        calo_2_hwPtErr_V_re => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_7,
        calo_3_hwPtErr_V_re => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_8,
        calo_4_hwPtErr_V_re => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_9,
        calo_0_hwEta_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_10,
        calo_1_hwEta_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_11,
        calo_2_hwEta_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_12,
        calo_3_hwEta_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_13,
        calo_4_hwEta_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_14,
        calo_0_hwPhi_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_15,
        calo_1_hwPhi_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_16,
        calo_2_hwPhi_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_17,
        calo_3_hwPhi_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_18,
        calo_4_hwPhi_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_19,
        hadcalo_0_hwPt_V_re => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_20,
        hadcalo_1_hwPt_V_re => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_21,
        hadcalo_2_hwPt_V_re => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_22,
        hadcalo_3_hwPt_V_re => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_23,
        hadcalo_4_hwPt_V_re => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_24,
        hadcalo_0_hwEta_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_25,
        hadcalo_1_hwEta_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_26,
        hadcalo_2_hwEta_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_27,
        hadcalo_3_hwEta_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_28,
        hadcalo_4_hwEta_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_29,
        hadcalo_0_hwPhi_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_30,
        hadcalo_1_hwPhi_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_31,
        hadcalo_2_hwPhi_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_32,
        hadcalo_3_hwPhi_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_33,
        hadcalo_4_hwPhi_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_34,
        hadcalo_0_hwEmPt_V_s => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_35,
        hadcalo_1_hwEmPt_V_s => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_36,
        hadcalo_2_hwEmPt_V_s => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_37,
        hadcalo_3_hwEmPt_V_s => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_38,
        hadcalo_4_hwEmPt_V_s => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_39,
        hadcalo_0_hwIsEM_re => grp_pfalgo3_full_fu_804_hadcalo_0_hwIsEM_re,
        hadcalo_1_hwIsEM_re => grp_pfalgo3_full_fu_804_hadcalo_1_hwIsEM_re,
        hadcalo_2_hwIsEM_re => grp_pfalgo3_full_fu_804_hadcalo_2_hwIsEM_re,
        hadcalo_3_hwIsEM_re => grp_pfalgo3_full_fu_804_hadcalo_3_hwIsEM_re,
        hadcalo_4_hwIsEM_re => grp_pfalgo3_full_fu_804_hadcalo_4_hwIsEM_re,
        track_0_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_45,
        track_1_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_46,
        track_2_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_47,
        track_3_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_48,
        track_4_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_49,
        track_5_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_50,
        track_6_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_51,
        track_0_hwPtErr_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_52,
        track_1_hwPtErr_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_53,
        track_2_hwPtErr_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_54,
        track_3_hwPtErr_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_55,
        track_4_hwPtErr_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_56,
        track_5_hwPtErr_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_57,
        track_6_hwPtErr_V_r => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_58,
        track_0_hwEta_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_59,
        track_1_hwEta_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_60,
        track_2_hwEta_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_61,
        track_3_hwEta_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_62,
        track_4_hwEta_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_63,
        track_5_hwEta_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_64,
        track_6_hwEta_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_65,
        track_0_hwPhi_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_66,
        track_1_hwPhi_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_67,
        track_2_hwPhi_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_68,
        track_3_hwPhi_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_69,
        track_4_hwPhi_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_70,
        track_5_hwPhi_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_71,
        track_6_hwPhi_V_rea => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_72,
        track_0_hwZ0_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_73,
        track_1_hwZ0_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_74,
        track_2_hwZ0_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_75,
        track_3_hwZ0_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_76,
        track_4_hwZ0_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_77,
        track_5_hwZ0_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_78,
        track_6_hwZ0_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_79,
        mu_0_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_80,
        mu_1_hwPt_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_81,
        mu_0_hwPtErr_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_82,
        mu_1_hwPtErr_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_83,
        mu_0_hwEta_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_84,
        mu_1_hwEta_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_85,
        mu_0_hwPhi_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_86,
        mu_1_hwPhi_V_read => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_87,
        ap_return_0 => grp_pfalgo3_full_fu_804_ap_return_0,
        ap_return_1 => grp_pfalgo3_full_fu_804_ap_return_1,
        ap_return_2 => grp_pfalgo3_full_fu_804_ap_return_2,
        ap_return_3 => grp_pfalgo3_full_fu_804_ap_return_3,
        ap_return_4 => grp_pfalgo3_full_fu_804_ap_return_4,
        ap_return_5 => grp_pfalgo3_full_fu_804_ap_return_5,
        ap_return_6 => grp_pfalgo3_full_fu_804_ap_return_6,
        ap_return_7 => grp_pfalgo3_full_fu_804_ap_return_7,
        ap_return_8 => grp_pfalgo3_full_fu_804_ap_return_8,
        ap_return_9 => grp_pfalgo3_full_fu_804_ap_return_9,
        ap_return_10 => grp_pfalgo3_full_fu_804_ap_return_10,
        ap_return_11 => grp_pfalgo3_full_fu_804_ap_return_11,
        ap_return_12 => grp_pfalgo3_full_fu_804_ap_return_12,
        ap_return_13 => grp_pfalgo3_full_fu_804_ap_return_13,
        ap_return_14 => grp_pfalgo3_full_fu_804_ap_return_14,
        ap_return_15 => grp_pfalgo3_full_fu_804_ap_return_15,
        ap_return_16 => grp_pfalgo3_full_fu_804_ap_return_16,
        ap_return_17 => grp_pfalgo3_full_fu_804_ap_return_17,
        ap_return_18 => grp_pfalgo3_full_fu_804_ap_return_18,
        ap_return_19 => grp_pfalgo3_full_fu_804_ap_return_19,
        ap_return_20 => grp_pfalgo3_full_fu_804_ap_return_20,
        ap_return_21 => grp_pfalgo3_full_fu_804_ap_return_21,
        ap_return_22 => grp_pfalgo3_full_fu_804_ap_return_22,
        ap_return_23 => grp_pfalgo3_full_fu_804_ap_return_23,
        ap_return_24 => grp_pfalgo3_full_fu_804_ap_return_24,
        ap_return_25 => grp_pfalgo3_full_fu_804_ap_return_25,
        ap_return_26 => grp_pfalgo3_full_fu_804_ap_return_26,
        ap_return_27 => grp_pfalgo3_full_fu_804_ap_return_27,
        ap_return_28 => grp_pfalgo3_full_fu_804_ap_return_28,
        ap_return_29 => grp_pfalgo3_full_fu_804_ap_return_29,
        ap_return_30 => grp_pfalgo3_full_fu_804_ap_return_30,
        ap_return_31 => grp_pfalgo3_full_fu_804_ap_return_31,
        ap_return_32 => grp_pfalgo3_full_fu_804_ap_return_32,
        ap_return_33 => grp_pfalgo3_full_fu_804_ap_return_33,
        ap_return_34 => grp_pfalgo3_full_fu_804_ap_return_34,
        ap_return_35 => grp_pfalgo3_full_fu_804_ap_return_35,
        ap_return_36 => grp_pfalgo3_full_fu_804_ap_return_36,
        ap_return_37 => grp_pfalgo3_full_fu_804_ap_return_37,
        ap_return_38 => grp_pfalgo3_full_fu_804_ap_return_38,
        ap_return_39 => grp_pfalgo3_full_fu_804_ap_return_39,
        ap_return_40 => grp_pfalgo3_full_fu_804_ap_return_40,
        ap_return_41 => grp_pfalgo3_full_fu_804_ap_return_41,
        ap_return_42 => grp_pfalgo3_full_fu_804_ap_return_42,
        ap_return_43 => grp_pfalgo3_full_fu_804_ap_return_43,
        ap_return_44 => grp_pfalgo3_full_fu_804_ap_return_44,
        ap_return_45 => grp_pfalgo3_full_fu_804_ap_return_45,
        ap_return_46 => grp_pfalgo3_full_fu_804_ap_return_46,
        ap_return_47 => grp_pfalgo3_full_fu_804_ap_return_47,
        ap_return_48 => grp_pfalgo3_full_fu_804_ap_return_48,
        ap_return_49 => grp_pfalgo3_full_fu_804_ap_return_49,
        ap_return_50 => grp_pfalgo3_full_fu_804_ap_return_50,
        ap_return_51 => grp_pfalgo3_full_fu_804_ap_return_51,
        ap_return_52 => grp_pfalgo3_full_fu_804_ap_return_52,
        ap_return_53 => grp_pfalgo3_full_fu_804_ap_return_53,
        ap_return_54 => grp_pfalgo3_full_fu_804_ap_return_54,
        ap_return_55 => grp_pfalgo3_full_fu_804_ap_return_55,
        ap_return_56 => grp_pfalgo3_full_fu_804_ap_return_56,
        ap_return_57 => grp_pfalgo3_full_fu_804_ap_return_57,
        ap_return_58 => grp_pfalgo3_full_fu_804_ap_return_58,
        ap_return_59 => grp_pfalgo3_full_fu_804_ap_return_59,
        ap_return_60 => grp_pfalgo3_full_fu_804_ap_return_60,
        ap_return_61 => grp_pfalgo3_full_fu_804_ap_return_61,
        ap_return_62 => grp_pfalgo3_full_fu_804_ap_return_62,
        ap_return_63 => grp_pfalgo3_full_fu_804_ap_return_63,
        ap_return_64 => grp_pfalgo3_full_fu_804_ap_return_64,
        ap_return_65 => grp_pfalgo3_full_fu_804_ap_return_65,
        ap_return_66 => grp_pfalgo3_full_fu_804_ap_return_66,
        ap_return_67 => grp_pfalgo3_full_fu_804_ap_return_67,
        ap_return_68 => grp_pfalgo3_full_fu_804_ap_return_68,
        ap_return_69 => grp_pfalgo3_full_fu_804_ap_return_69,
        ap_return_70 => grp_pfalgo3_full_fu_804_ap_return_70,
        ap_return_71 => grp_pfalgo3_full_fu_804_ap_return_71,
        ap_return_72 => grp_pfalgo3_full_fu_804_ap_return_72,
        ap_return_73 => grp_pfalgo3_full_fu_804_ap_return_73,
        ap_return_74 => grp_pfalgo3_full_fu_804_ap_return_74,
        ap_return_75 => grp_pfalgo3_full_fu_804_ap_return_75,
        ap_return_76 => grp_pfalgo3_full_fu_804_ap_return_76,
        ap_return_77 => grp_pfalgo3_full_fu_804_ap_return_77,
        ap_return_78 => grp_pfalgo3_full_fu_804_ap_return_78,
        ap_return_79 => grp_pfalgo3_full_fu_804_ap_return_79,
        ap_return_80 => grp_pfalgo3_full_fu_804_ap_return_80);

    call_ret_mp7wrapped_unpack_in_fu_898 : component mp7wrapped_unpack_in
    port map (
        data_0_V_read => input_0_V,
        data_1_V_read => input_1_V,
        data_2_V_read => input_2_V,
        data_3_V_read => input_3_V,
        data_4_V_read => input_4_V,
        data_5_V_read => input_5_V,
        data_6_V_read => input_6_V,
        data_7_V_read => input_7_V,
        data_8_V_read => input_8_V,
        data_9_V_read => input_9_V,
        data_10_V_read => input_10_V,
        data_11_V_read => input_11_V,
        data_12_V_read => input_12_V,
        data_13_V_read => input_13_V,
        data_14_V_read => input_14_V,
        data_15_V_read => input_15_V,
        data_16_V_read => input_16_V,
        data_17_V_read => input_17_V,
        data_18_V_read => input_18_V,
        data_19_V_read => input_19_V,
        data_20_V_read => input_20_V,
        data_21_V_read => input_21_V,
        data_22_V_read => input_22_V,
        data_23_V_read => input_23_V,
        data_24_V_read => input_24_V,
        data_25_V_read => input_25_V,
        data_26_V_read => input_26_V,
        data_27_V_read => input_27_V,
        data_28_V_read => input_28_V,
        data_29_V_read => input_29_V,
        data_30_V_read => input_30_V,
        data_31_V_read => input_31_V,
        data_32_V_read => input_32_V,
        data_33_V_read => input_33_V,
        data_34_V_read => input_34_V,
        data_35_V_read => input_35_V,
        data_36_V_read => input_36_V,
        data_37_V_read => input_37_V,
        ap_return_0 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_0,
        ap_return_1 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_1,
        ap_return_2 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_2,
        ap_return_3 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_3,
        ap_return_4 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_4,
        ap_return_5 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_5,
        ap_return_6 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_6,
        ap_return_7 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_7,
        ap_return_8 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_8,
        ap_return_9 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_9,
        ap_return_10 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_10,
        ap_return_11 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_11,
        ap_return_12 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_12,
        ap_return_13 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_13,
        ap_return_14 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_14,
        ap_return_15 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_15,
        ap_return_16 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_16,
        ap_return_17 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_17,
        ap_return_18 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_18,
        ap_return_19 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_19,
        ap_return_20 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_20,
        ap_return_21 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_21,
        ap_return_22 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_22,
        ap_return_23 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_23,
        ap_return_24 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_24,
        ap_return_25 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_25,
        ap_return_26 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_26,
        ap_return_27 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_27,
        ap_return_28 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_28,
        ap_return_29 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_29,
        ap_return_30 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_30,
        ap_return_31 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_31,
        ap_return_32 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_32,
        ap_return_33 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_33,
        ap_return_34 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_34,
        ap_return_35 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_35,
        ap_return_36 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_36,
        ap_return_37 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_37,
        ap_return_38 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_38,
        ap_return_39 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_39,
        ap_return_40 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_40,
        ap_return_41 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_41,
        ap_return_42 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_42,
        ap_return_43 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_43,
        ap_return_44 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_44,
        ap_return_45 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_45,
        ap_return_46 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_46,
        ap_return_47 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_47,
        ap_return_48 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_48,
        ap_return_49 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_49,
        ap_return_50 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_50,
        ap_return_51 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_51,
        ap_return_52 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_52,
        ap_return_53 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_53,
        ap_return_54 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_54,
        ap_return_55 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_55,
        ap_return_56 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_56,
        ap_return_57 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_57,
        ap_return_58 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_58,
        ap_return_59 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_59,
        ap_return_60 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_60,
        ap_return_61 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_61,
        ap_return_62 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_62,
        ap_return_63 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_63,
        ap_return_64 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_64,
        ap_return_65 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_65,
        ap_return_66 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_66,
        ap_return_67 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_67,
        ap_return_68 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_68,
        ap_return_69 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_69,
        ap_return_70 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_70,
        ap_return_71 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_71,
        ap_return_72 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_72,
        ap_return_73 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_73,
        ap_return_74 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_74,
        ap_return_75 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_75,
        ap_return_76 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_76,
        ap_return_77 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_77,
        ap_return_78 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_78,
        ap_return_79 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_79,
        ap_return_80 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_80,
        ap_return_81 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_81,
        ap_return_82 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_82,
        ap_return_83 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_83,
        ap_return_84 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_84,
        ap_return_85 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_85,
        ap_return_86 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_86,
        ap_return_87 => call_ret_mp7wrapped_unpack_in_fu_898_ap_return_87);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_preg <= ap_const_logic_0;
            else
                if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter38)))) then 
                    ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
                elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_pipeline_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and not((ap_const_logic_1 = ap_pipeline_idle_pp0)) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter15) and (ap_const_logic_0 = ap_enable_reg_pp0_iter16) and (ap_const_logic_0 = ap_enable_reg_pp0_iter17) and (ap_const_logic_0 = ap_enable_reg_pp0_iter18) and (ap_const_logic_0 = ap_enable_reg_pp0_iter19) and (ap_const_logic_0 = ap_enable_reg_pp0_iter20) and (ap_const_logic_0 = ap_enable_reg_pp0_iter21) and (ap_const_logic_0 = ap_enable_reg_pp0_iter22) and (ap_const_logic_0 = ap_enable_reg_pp0_iter23) and (ap_const_logic_0 = ap_enable_reg_pp0_iter24) and (ap_const_logic_0 = ap_enable_reg_pp0_iter25) and (ap_const_logic_0 = ap_enable_reg_pp0_iter26) and (ap_const_logic_0 = ap_enable_reg_pp0_iter27) and (ap_const_logic_0 = ap_enable_reg_pp0_iter28) and (ap_const_logic_0 = ap_enable_reg_pp0_iter29) and (ap_const_logic_0 = ap_enable_reg_pp0_iter30) and (ap_const_logic_0 = ap_enable_reg_pp0_iter31) and (ap_const_logic_0 = ap_enable_reg_pp0_iter32) and (ap_const_logic_0 = ap_enable_reg_pp0_iter33) and (ap_const_logic_0 = ap_enable_reg_pp0_iter34) and (ap_const_logic_0 = ap_enable_reg_pp0_iter35) and (ap_const_logic_0 = ap_enable_reg_pp0_iter36) and (ap_const_logic_0 = ap_enable_reg_pp0_iter37) and (ap_const_logic_0 = ap_enable_reg_pp0_iter38) and (ap_const_logic_0 = ap_enable_reg_pp0_iter39))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_pipeline_idle_pp0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1 downto 1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter39)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter39))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_preg)
    begin
        if ((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_preg;
        end if; 
    end process;


    ap_grp_pfalgo3_full_fu_804_ap_start_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_start = ap_const_logic_0)))) then 
            ap_grp_pfalgo3_full_fu_804_ap_start <= ap_const_logic_1;
        else 
            ap_grp_pfalgo3_full_fu_804_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter15) and (ap_const_logic_0 = ap_enable_reg_pp0_iter16) and (ap_const_logic_0 = ap_enable_reg_pp0_iter17) and (ap_const_logic_0 = ap_enable_reg_pp0_iter18) and (ap_const_logic_0 = ap_enable_reg_pp0_iter19) and (ap_const_logic_0 = ap_enable_reg_pp0_iter20) and (ap_const_logic_0 = ap_enable_reg_pp0_iter21) and (ap_const_logic_0 = ap_enable_reg_pp0_iter22) and (ap_const_logic_0 = ap_enable_reg_pp0_iter23) and (ap_const_logic_0 = ap_enable_reg_pp0_iter24) and (ap_const_logic_0 = ap_enable_reg_pp0_iter25) and (ap_const_logic_0 = ap_enable_reg_pp0_iter26) and (ap_const_logic_0 = ap_enable_reg_pp0_iter27) and (ap_const_logic_0 = ap_enable_reg_pp0_iter28) and (ap_const_logic_0 = ap_enable_reg_pp0_iter29) and (ap_const_logic_0 = ap_enable_reg_pp0_iter30) and (ap_const_logic_0 = ap_enable_reg_pp0_iter31) and (ap_const_logic_0 = ap_enable_reg_pp0_iter32) and (ap_const_logic_0 = ap_enable_reg_pp0_iter33) and (ap_const_logic_0 = ap_enable_reg_pp0_iter34) and (ap_const_logic_0 = ap_enable_reg_pp0_iter35) and (ap_const_logic_0 = ap_enable_reg_pp0_iter36) and (ap_const_logic_0 = ap_enable_reg_pp0_iter37) and (ap_const_logic_0 = ap_enable_reg_pp0_iter38) and (ap_const_logic_0 = ap_enable_reg_pp0_iter39))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_pipeline_idle_pp0_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter15) and (ap_const_logic_0 = ap_enable_reg_pp0_iter16) and (ap_const_logic_0 = ap_enable_reg_pp0_iter17) and (ap_const_logic_0 = ap_enable_reg_pp0_iter18) and (ap_const_logic_0 = ap_enable_reg_pp0_iter19) and (ap_const_logic_0 = ap_enable_reg_pp0_iter20) and (ap_const_logic_0 = ap_enable_reg_pp0_iter21) and (ap_const_logic_0 = ap_enable_reg_pp0_iter22) and (ap_const_logic_0 = ap_enable_reg_pp0_iter23) and (ap_const_logic_0 = ap_enable_reg_pp0_iter24) and (ap_const_logic_0 = ap_enable_reg_pp0_iter25) and (ap_const_logic_0 = ap_enable_reg_pp0_iter26) and (ap_const_logic_0 = ap_enable_reg_pp0_iter27) and (ap_const_logic_0 = ap_enable_reg_pp0_iter28) and (ap_const_logic_0 = ap_enable_reg_pp0_iter29) and (ap_const_logic_0 = ap_enable_reg_pp0_iter30) and (ap_const_logic_0 = ap_enable_reg_pp0_iter31) and (ap_const_logic_0 = ap_enable_reg_pp0_iter32) and (ap_const_logic_0 = ap_enable_reg_pp0_iter33) and (ap_const_logic_0 = ap_enable_reg_pp0_iter34) and (ap_const_logic_0 = ap_enable_reg_pp0_iter35) and (ap_const_logic_0 = ap_enable_reg_pp0_iter36) and (ap_const_logic_0 = ap_enable_reg_pp0_iter37) and (ap_const_logic_0 = ap_enable_reg_pp0_iter38))) then 
            ap_pipeline_idle_pp0 <= ap_const_logic_1;
        else 
            ap_pipeline_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_pfalgo3_full_fu_804_ap_start_assign_proc : process(ap_grp_pfalgo3_full_fu_804_ap_start)
    begin
        if ((ap_const_logic_1 = ap_grp_pfalgo3_full_fu_804_ap_start)) then 
            grp_pfalgo3_full_fu_804_ap_start <= ap_grp_pfalgo3_full_fu_804_ap_start;
        else 
            grp_pfalgo3_full_fu_804_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_pfalgo3_full_fu_804_hadcalo_0_hwIsEM_re <= call_ret_mp7wrapped_unpack_in_fu_898_ap_return_40(0);
    grp_pfalgo3_full_fu_804_hadcalo_1_hwIsEM_re <= call_ret_mp7wrapped_unpack_in_fu_898_ap_return_41(0);
    grp_pfalgo3_full_fu_804_hadcalo_2_hwIsEM_re <= call_ret_mp7wrapped_unpack_in_fu_898_ap_return_42(0);
    grp_pfalgo3_full_fu_804_hadcalo_3_hwIsEM_re <= call_ret_mp7wrapped_unpack_in_fu_898_ap_return_43(0);
    grp_pfalgo3_full_fu_804_hadcalo_4_hwIsEM_re <= call_ret_mp7wrapped_unpack_in_fu_898_ap_return_44(0);
    output_0_V <= std_logic_vector(resize(unsigned(p_Result_35_i_fu_1742_p3),32));
    output_10_V <= std_logic_vector(resize(unsigned(p_Result_35_5_i_fu_1882_p3),32));
    output_11_V <= std_logic_vector(resize(unsigned(p_Result_39_5_i_fu_1895_p4),32));
    output_12_V <= std_logic_vector(resize(unsigned(p_Result_35_6_i_fu_1910_p3),32));
    output_13_V <= std_logic_vector(resize(unsigned(p_Result_39_6_i_fu_1923_p4),32));
    output_14_V <= std_logic_vector(resize(unsigned(p_Result_41_i_fu_1938_p3),32));
    output_15_V <= std_logic_vector(resize(unsigned(p_Result_43_i_fu_1951_p3),32));
    output_16_V <= std_logic_vector(resize(unsigned(p_Result_41_1_i_fu_1964_p3),32));
    output_17_V <= std_logic_vector(resize(unsigned(p_Result_43_1_i_fu_1977_p3),32));
    output_18_V <= std_logic_vector(resize(unsigned(p_Result_41_2_i_fu_1990_p3),32));
    output_19_V <= std_logic_vector(resize(unsigned(p_Result_43_2_i_fu_2003_p3),32));
    output_1_V <= std_logic_vector(resize(unsigned(p_Result_39_i_fu_1755_p4),32));
    output_20_V <= std_logic_vector(resize(unsigned(p_Result_41_3_i_fu_2016_p3),32));
    output_21_V <= std_logic_vector(resize(unsigned(p_Result_43_3_i_fu_2029_p3),32));
    output_22_V <= std_logic_vector(resize(unsigned(p_Result_41_4_i_fu_2042_p3),32));
    output_23_V <= std_logic_vector(resize(unsigned(p_Result_43_4_i_fu_2055_p3),32));
    output_24_V <= std_logic_vector(resize(unsigned(p_Result_45_i_fu_2068_p3),32));
    output_25_V <= std_logic_vector(resize(unsigned(p_Result_47_i_fu_2081_p3),32));
    output_26_V <= std_logic_vector(resize(unsigned(p_Result_45_1_i_fu_2094_p3),32));
    output_27_V <= std_logic_vector(resize(unsigned(p_Result_47_1_i_fu_2107_p3),32));
    output_28_V <= std_logic_vector(resize(unsigned(p_Result_45_2_i_fu_2120_p3),32));
    output_29_V <= std_logic_vector(resize(unsigned(p_Result_47_2_i_fu_2133_p3),32));
    output_2_V <= std_logic_vector(resize(unsigned(p_Result_35_1_i_fu_1770_p3),32));
    output_30_V <= std_logic_vector(resize(unsigned(p_Result_45_3_i_fu_2146_p3),32));
    output_31_V <= std_logic_vector(resize(unsigned(p_Result_47_3_i_fu_2159_p3),32));
    output_32_V <= std_logic_vector(resize(unsigned(p_Result_49_i_fu_2172_p3),32));
    output_33_V <= std_logic_vector(resize(unsigned(p_Result_53_i_fu_2185_p4),32));
    output_34_V <= std_logic_vector(resize(unsigned(p_Result_49_1_i_fu_2200_p3),32));
    output_35_V <= std_logic_vector(resize(unsigned(p_Result_53_1_i_fu_2213_p4),32));
    output_3_V <= std_logic_vector(resize(unsigned(p_Result_39_1_i_fu_1783_p4),32));
    output_4_V <= std_logic_vector(resize(unsigned(p_Result_35_2_i_fu_1798_p3),32));
    output_5_V <= std_logic_vector(resize(unsigned(p_Result_39_2_i_fu_1811_p4),32));
    output_6_V <= std_logic_vector(resize(unsigned(p_Result_35_3_i_fu_1826_p3),32));
    output_7_V <= std_logic_vector(resize(unsigned(p_Result_39_3_i_fu_1839_p4),32));
    output_8_V <= std_logic_vector(resize(unsigned(p_Result_35_4_i_fu_1854_p3),32));
    output_9_V <= std_logic_vector(resize(unsigned(p_Result_39_4_i_fu_1867_p4),32));
    p_Result_35_1_i_fu_1770_p3 <= (grp_pfalgo3_full_fu_804_ap_return_22 & grp_pfalgo3_full_fu_804_ap_return_1);
    p_Result_35_2_i_fu_1798_p3 <= (grp_pfalgo3_full_fu_804_ap_return_23 & grp_pfalgo3_full_fu_804_ap_return_2);
    p_Result_35_3_i_fu_1826_p3 <= (grp_pfalgo3_full_fu_804_ap_return_24 & grp_pfalgo3_full_fu_804_ap_return_3);
    p_Result_35_4_i_fu_1854_p3 <= (grp_pfalgo3_full_fu_804_ap_return_25 & grp_pfalgo3_full_fu_804_ap_return_4);
    p_Result_35_5_i_fu_1882_p3 <= (grp_pfalgo3_full_fu_804_ap_return_26 & grp_pfalgo3_full_fu_804_ap_return_5);
    p_Result_35_6_i_fu_1910_p3 <= (grp_pfalgo3_full_fu_804_ap_return_27 & grp_pfalgo3_full_fu_804_ap_return_6);
    p_Result_35_i_fu_1742_p3 <= (grp_pfalgo3_full_fu_804_ap_return_21 & grp_pfalgo3_full_fu_804_ap_return_0);
    p_Result_39_1_i_fu_1783_p4 <= ((grp_pfalgo3_full_fu_804_ap_return_29 & grp_pfalgo3_full_fu_804_ap_return_15) & grp_pfalgo3_full_fu_804_ap_return_8);
    p_Result_39_2_i_fu_1811_p4 <= ((grp_pfalgo3_full_fu_804_ap_return_30 & grp_pfalgo3_full_fu_804_ap_return_16) & grp_pfalgo3_full_fu_804_ap_return_9);
    p_Result_39_3_i_fu_1839_p4 <= ((grp_pfalgo3_full_fu_804_ap_return_31 & grp_pfalgo3_full_fu_804_ap_return_17) & grp_pfalgo3_full_fu_804_ap_return_10);
    p_Result_39_4_i_fu_1867_p4 <= ((grp_pfalgo3_full_fu_804_ap_return_32 & grp_pfalgo3_full_fu_804_ap_return_18) & grp_pfalgo3_full_fu_804_ap_return_11);
    p_Result_39_5_i_fu_1895_p4 <= ((grp_pfalgo3_full_fu_804_ap_return_33 & grp_pfalgo3_full_fu_804_ap_return_19) & grp_pfalgo3_full_fu_804_ap_return_12);
    p_Result_39_6_i_fu_1923_p4 <= ((grp_pfalgo3_full_fu_804_ap_return_34 & grp_pfalgo3_full_fu_804_ap_return_20) & grp_pfalgo3_full_fu_804_ap_return_13);
    p_Result_39_i_fu_1755_p4 <= ((grp_pfalgo3_full_fu_804_ap_return_28 & grp_pfalgo3_full_fu_804_ap_return_14) & grp_pfalgo3_full_fu_804_ap_return_7);
    p_Result_41_1_i_fu_1964_p3 <= (grp_pfalgo3_full_fu_804_ap_return_51 & grp_pfalgo3_full_fu_804_ap_return_36);
    p_Result_41_2_i_fu_1990_p3 <= (grp_pfalgo3_full_fu_804_ap_return_52 & grp_pfalgo3_full_fu_804_ap_return_37);
    p_Result_41_3_i_fu_2016_p3 <= (grp_pfalgo3_full_fu_804_ap_return_53 & grp_pfalgo3_full_fu_804_ap_return_38);
    p_Result_41_4_i_fu_2042_p3 <= (grp_pfalgo3_full_fu_804_ap_return_54 & grp_pfalgo3_full_fu_804_ap_return_39);
    p_Result_41_i_fu_1938_p3 <= (grp_pfalgo3_full_fu_804_ap_return_50 & grp_pfalgo3_full_fu_804_ap_return_35);
    p_Result_43_1_i_fu_1977_p3 <= (grp_pfalgo3_full_fu_804_ap_return_46 & grp_pfalgo3_full_fu_804_ap_return_41);
    p_Result_43_2_i_fu_2003_p3 <= (grp_pfalgo3_full_fu_804_ap_return_47 & grp_pfalgo3_full_fu_804_ap_return_42);
    p_Result_43_3_i_fu_2029_p3 <= (grp_pfalgo3_full_fu_804_ap_return_48 & grp_pfalgo3_full_fu_804_ap_return_43);
    p_Result_43_4_i_fu_2055_p3 <= (grp_pfalgo3_full_fu_804_ap_return_49 & grp_pfalgo3_full_fu_804_ap_return_44);
    p_Result_43_i_fu_1951_p3 <= (grp_pfalgo3_full_fu_804_ap_return_45 & grp_pfalgo3_full_fu_804_ap_return_40);
    p_Result_45_1_i_fu_2094_p3 <= (grp_pfalgo3_full_fu_804_ap_return_68 & grp_pfalgo3_full_fu_804_ap_return_56);
    p_Result_45_2_i_fu_2120_p3 <= (grp_pfalgo3_full_fu_804_ap_return_69 & grp_pfalgo3_full_fu_804_ap_return_57);
    p_Result_45_3_i_fu_2146_p3 <= (grp_pfalgo3_full_fu_804_ap_return_70 & grp_pfalgo3_full_fu_804_ap_return_58);
    p_Result_45_i_fu_2068_p3 <= (grp_pfalgo3_full_fu_804_ap_return_67 & grp_pfalgo3_full_fu_804_ap_return_55);
    p_Result_47_1_i_fu_2107_p3 <= (grp_pfalgo3_full_fu_804_ap_return_64 & grp_pfalgo3_full_fu_804_ap_return_60);
    p_Result_47_2_i_fu_2133_p3 <= (grp_pfalgo3_full_fu_804_ap_return_65 & grp_pfalgo3_full_fu_804_ap_return_61);
    p_Result_47_3_i_fu_2159_p3 <= (grp_pfalgo3_full_fu_804_ap_return_66 & grp_pfalgo3_full_fu_804_ap_return_62);
    p_Result_47_i_fu_2081_p3 <= (grp_pfalgo3_full_fu_804_ap_return_63 & grp_pfalgo3_full_fu_804_ap_return_59);
    p_Result_49_1_i_fu_2200_p3 <= (grp_pfalgo3_full_fu_804_ap_return_78 & grp_pfalgo3_full_fu_804_ap_return_72);
    p_Result_49_i_fu_2172_p3 <= (grp_pfalgo3_full_fu_804_ap_return_77 & grp_pfalgo3_full_fu_804_ap_return_71);
    p_Result_53_1_i_fu_2213_p4 <= ((grp_pfalgo3_full_fu_804_ap_return_80 & grp_pfalgo3_full_fu_804_ap_return_76) & grp_pfalgo3_full_fu_804_ap_return_74);
    p_Result_53_i_fu_2185_p4 <= ((grp_pfalgo3_full_fu_804_ap_return_79 & grp_pfalgo3_full_fu_804_ap_return_75) & grp_pfalgo3_full_fu_804_ap_return_73);
end behav;
