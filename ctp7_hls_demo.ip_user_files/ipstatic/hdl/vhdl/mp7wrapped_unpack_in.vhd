-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mp7wrapped_unpack_in is
port (
    data_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_5_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_6_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_7_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_8_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_9_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_10_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_11_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_12_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_13_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_14_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_15_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_16_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_17_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_18_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_19_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_20_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_21_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_22_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_23_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_24_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_25_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_26_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_27_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_28_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_29_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_30_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_31_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_32_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_33_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_34_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_35_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_36_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_37_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_36 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_37 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_38 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_39 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_40 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_41 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_42 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_43 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_44 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_45 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_46 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_47 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_48 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_49 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_50 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_51 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_52 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_53 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_54 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_55 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_56 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_57 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_58 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_59 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_60 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_61 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_62 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_63 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_64 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_65 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_66 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_67 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_68 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_69 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_70 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_71 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_72 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_73 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ap_return_74 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ap_return_75 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ap_return_76 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ap_return_77 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ap_return_78 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ap_return_79 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ap_return_80 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_81 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_82 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_83 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_84 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_85 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_86 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_87 : OUT STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of mp7wrapped_unpack_in is 
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal tmp_fu_328_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_192_fu_356_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_194_fu_384_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_196_fu_412_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_198_fu_440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_191_fu_342_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_193_fu_370_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_195_fu_398_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_197_fu_426_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_199_fu_454_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_200_fu_468_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_203_fu_504_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_206_fu_540_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_209_fu_576_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_212_fu_612_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_201_fu_482_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_204_fu_518_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_207_fu_554_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_210_fu_590_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_213_fu_626_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_215_fu_648_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_217_fu_686_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_219_fu_724_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_221_fu_762_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_223_fu_800_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_225_fu_838_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_227_fu_876_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_216_fu_662_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_218_fu_700_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_220_fu_738_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_222_fu_776_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_224_fu_814_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_226_fu_852_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_228_fu_890_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_229_fu_914_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_231_fu_942_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_230_fu_928_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_232_fu_956_p1 : STD_LOGIC_VECTOR (8 downto 0);


begin



    ap_return_0 <= tmp_fu_328_p1;
    ap_return_1 <= tmp_192_fu_356_p1;
    ap_return_10 <= tmp_191_fu_342_p1;
    ap_return_11 <= tmp_193_fu_370_p1;
    ap_return_12 <= tmp_195_fu_398_p1;
    ap_return_13 <= tmp_197_fu_426_p1;
    ap_return_14 <= tmp_199_fu_454_p1;
    ap_return_15 <= data_1_V_read(17 downto 9);
    ap_return_16 <= data_3_V_read(17 downto 9);
    ap_return_17 <= data_5_V_read(17 downto 9);
    ap_return_18 <= data_7_V_read(17 downto 9);
    ap_return_19 <= data_9_V_read(17 downto 9);
    ap_return_2 <= tmp_194_fu_384_p1;
    ap_return_20 <= tmp_200_fu_468_p1;
    ap_return_21 <= tmp_203_fu_504_p1;
    ap_return_22 <= tmp_206_fu_540_p1;
    ap_return_23 <= tmp_209_fu_576_p1;
    ap_return_24 <= tmp_212_fu_612_p1;
    ap_return_25 <= tmp_201_fu_482_p1;
    ap_return_26 <= tmp_204_fu_518_p1;
    ap_return_27 <= tmp_207_fu_554_p1;
    ap_return_28 <= tmp_210_fu_590_p1;
    ap_return_29 <= tmp_213_fu_626_p1;
    ap_return_3 <= tmp_196_fu_412_p1;
    ap_return_30 <= data_11_V_read(17 downto 9);
    ap_return_31 <= data_13_V_read(17 downto 9);
    ap_return_32 <= data_15_V_read(17 downto 9);
    ap_return_33 <= data_17_V_read(17 downto 9);
    ap_return_34 <= data_19_V_read(17 downto 9);
    ap_return_35 <= data_10_V_read(31 downto 16);
    ap_return_36 <= data_12_V_read(31 downto 16);
    ap_return_37 <= data_14_V_read(31 downto 16);
    ap_return_38 <= data_16_V_read(31 downto 16);
    ap_return_39 <= data_18_V_read(31 downto 16);
    ap_return_4 <= tmp_198_fu_440_p1;
    ap_return_40 <= data_11_V_read(18 downto 18);
    ap_return_41 <= data_13_V_read(18 downto 18);
    ap_return_42 <= data_15_V_read(18 downto 18);
    ap_return_43 <= data_17_V_read(18 downto 18);
    ap_return_44 <= data_19_V_read(18 downto 18);
    ap_return_45 <= tmp_215_fu_648_p1;
    ap_return_46 <= tmp_217_fu_686_p1;
    ap_return_47 <= tmp_219_fu_724_p1;
    ap_return_48 <= tmp_221_fu_762_p1;
    ap_return_49 <= tmp_223_fu_800_p1;
    ap_return_5 <= data_0_V_read(31 downto 16);
    ap_return_50 <= tmp_225_fu_838_p1;
    ap_return_51 <= tmp_227_fu_876_p1;
    ap_return_52 <= data_20_V_read(31 downto 16);
    ap_return_53 <= data_22_V_read(31 downto 16);
    ap_return_54 <= data_24_V_read(31 downto 16);
    ap_return_55 <= data_26_V_read(31 downto 16);
    ap_return_56 <= data_28_V_read(31 downto 16);
    ap_return_57 <= data_30_V_read(31 downto 16);
    ap_return_58 <= data_32_V_read(31 downto 16);
    ap_return_59 <= tmp_216_fu_662_p1;
    ap_return_6 <= data_2_V_read(31 downto 16);
    ap_return_60 <= tmp_218_fu_700_p1;
    ap_return_61 <= tmp_220_fu_738_p1;
    ap_return_62 <= tmp_222_fu_776_p1;
    ap_return_63 <= tmp_224_fu_814_p1;
    ap_return_64 <= tmp_226_fu_852_p1;
    ap_return_65 <= tmp_228_fu_890_p1;
    ap_return_66 <= data_21_V_read(17 downto 9);
    ap_return_67 <= data_23_V_read(17 downto 9);
    ap_return_68 <= data_25_V_read(17 downto 9);
    ap_return_69 <= data_27_V_read(17 downto 9);
    ap_return_7 <= data_4_V_read(31 downto 16);
    ap_return_70 <= data_29_V_read(17 downto 9);
    ap_return_71 <= data_31_V_read(17 downto 9);
    ap_return_72 <= data_33_V_read(17 downto 9);
    ap_return_73 <= data_21_V_read(27 downto 18);
    ap_return_74 <= data_23_V_read(27 downto 18);
    ap_return_75 <= data_25_V_read(27 downto 18);
    ap_return_76 <= data_27_V_read(27 downto 18);
    ap_return_77 <= data_29_V_read(27 downto 18);
    ap_return_78 <= data_31_V_read(27 downto 18);
    ap_return_79 <= data_33_V_read(27 downto 18);
    ap_return_8 <= data_6_V_read(31 downto 16);
    ap_return_80 <= tmp_229_fu_914_p1;
    ap_return_81 <= tmp_231_fu_942_p1;
    ap_return_82 <= data_34_V_read(31 downto 16);
    ap_return_83 <= data_36_V_read(31 downto 16);
    ap_return_84 <= tmp_230_fu_928_p1;
    ap_return_85 <= tmp_232_fu_956_p1;
    ap_return_86 <= data_35_V_read(17 downto 9);
    ap_return_87 <= data_37_V_read(17 downto 9);
    ap_return_9 <= data_8_V_read(31 downto 16);
    tmp_191_fu_342_p1 <= data_1_V_read(9 - 1 downto 0);
    tmp_192_fu_356_p1 <= data_2_V_read(16 - 1 downto 0);
    tmp_193_fu_370_p1 <= data_3_V_read(9 - 1 downto 0);
    tmp_194_fu_384_p1 <= data_4_V_read(16 - 1 downto 0);
    tmp_195_fu_398_p1 <= data_5_V_read(9 - 1 downto 0);
    tmp_196_fu_412_p1 <= data_6_V_read(16 - 1 downto 0);
    tmp_197_fu_426_p1 <= data_7_V_read(9 - 1 downto 0);
    tmp_198_fu_440_p1 <= data_8_V_read(16 - 1 downto 0);
    tmp_199_fu_454_p1 <= data_9_V_read(9 - 1 downto 0);
    tmp_200_fu_468_p1 <= data_10_V_read(16 - 1 downto 0);
    tmp_201_fu_482_p1 <= data_11_V_read(9 - 1 downto 0);
    tmp_203_fu_504_p1 <= data_12_V_read(16 - 1 downto 0);
    tmp_204_fu_518_p1 <= data_13_V_read(9 - 1 downto 0);
    tmp_206_fu_540_p1 <= data_14_V_read(16 - 1 downto 0);
    tmp_207_fu_554_p1 <= data_15_V_read(9 - 1 downto 0);
    tmp_209_fu_576_p1 <= data_16_V_read(16 - 1 downto 0);
    tmp_210_fu_590_p1 <= data_17_V_read(9 - 1 downto 0);
    tmp_212_fu_612_p1 <= data_18_V_read(16 - 1 downto 0);
    tmp_213_fu_626_p1 <= data_19_V_read(9 - 1 downto 0);
    tmp_215_fu_648_p1 <= data_20_V_read(16 - 1 downto 0);
    tmp_216_fu_662_p1 <= data_21_V_read(9 - 1 downto 0);
    tmp_217_fu_686_p1 <= data_22_V_read(16 - 1 downto 0);
    tmp_218_fu_700_p1 <= data_23_V_read(9 - 1 downto 0);
    tmp_219_fu_724_p1 <= data_24_V_read(16 - 1 downto 0);
    tmp_220_fu_738_p1 <= data_25_V_read(9 - 1 downto 0);
    tmp_221_fu_762_p1 <= data_26_V_read(16 - 1 downto 0);
    tmp_222_fu_776_p1 <= data_27_V_read(9 - 1 downto 0);
    tmp_223_fu_800_p1 <= data_28_V_read(16 - 1 downto 0);
    tmp_224_fu_814_p1 <= data_29_V_read(9 - 1 downto 0);
    tmp_225_fu_838_p1 <= data_30_V_read(16 - 1 downto 0);
    tmp_226_fu_852_p1 <= data_31_V_read(9 - 1 downto 0);
    tmp_227_fu_876_p1 <= data_32_V_read(16 - 1 downto 0);
    tmp_228_fu_890_p1 <= data_33_V_read(9 - 1 downto 0);
    tmp_229_fu_914_p1 <= data_34_V_read(16 - 1 downto 0);
    tmp_230_fu_928_p1 <= data_35_V_read(9 - 1 downto 0);
    tmp_231_fu_942_p1 <= data_36_V_read(16 - 1 downto 0);
    tmp_232_fu_956_p1 <= data_37_V_read(9 - 1 downto 0);
    tmp_fu_328_p1 <= data_0_V_read(16 - 1 downto 0);
end behav;
