-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_demo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    algo_config_cfg1_V : IN STD_LOGIC_VECTOR (31 downto 0);
    algo_config_cfg2_V : IN STD_LOGIC_VECTOR (15 downto 0);
    algo_config_cfg3_V : IN STD_LOGIC_VECTOR (7 downto 0);
    algo_in_a_V : IN STD_LOGIC_VECTOR (4 downto 0);
    algo_in_b_V : IN STD_LOGIC_VECTOR (19 downto 0);
    algo_in_c_V : IN STD_LOGIC_VECTOR (30 downto 0);
    algo_in_d_V : IN STD_LOGIC_VECTOR (18 downto 0);
    algo_out_w_V : OUT STD_LOGIC_VECTOR (24 downto 0);
    algo_out_x_V : OUT STD_LOGIC_VECTOR (17 downto 0);
    algo_out_y_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    algo_out_z_V : OUT STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of hls_demo is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_demo,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1927-2,HLS_INPUT_CLOCK=4.160000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.170000,HLS_SYN_LAT=24,HLS_SYN_TPT=6,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1100,HLS_SYN_LUT=1151}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal algo_in_b_V_read_reg_234 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_fu_134_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_reg_240 : STD_LOGIC_VECTOR (17 downto 0);
    signal algo_config_cfg3_V_r_reg_250 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp0_iter1_algo_config_cfg3_V_r_reg_250 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp0_iter2_algo_config_cfg3_V_r_reg_250 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp0_iter3_algo_config_cfg3_V_r_reg_250 : STD_LOGIC_VECTOR (7 downto 0);
    signal algo_config_cfg2_V_r_reg_255 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_169_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_2_reg_260 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_2_reg_260 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_2_reg_260 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_pipeline_reg_pp0_iter3_tmp_2_reg_260 : STD_LOGIC_VECTOR (24 downto 0);
    signal addconv1_fu_193_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal addconv1_reg_265 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_pipeline_reg_pp0_iter1_addconv1_reg_265 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_pipeline_reg_pp0_iter2_addconv1_reg_265 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_pipeline_reg_pp0_iter3_addconv1_reg_265 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_s_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_pipeline_reg_pp0_iter2_tmp_s_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter3_tmp_s_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_142_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_reg_285 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0_preg : STD_LOGIC := '0';
    signal rhs_V_fu_152_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal lhs_V_fu_148_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_fu_155_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_1_fu_165_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_161_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_5_cast_fu_179_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_cast_fu_175_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_fu_183_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_cast_fu_189_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_221_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_224_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_pipeline_idle_pp0 : STD_LOGIC;

    component hls_demo_sdiv_20nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component hls_demo_mul_31s_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hls_demo_sdiv_20nbkb_U1 : component hls_demo_sdiv_20nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 24,
        din0_WIDTH => 20,
        din1_WIDTH => 19,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => algo_in_b_V,
        din1 => algo_in_d_V,
        ce => ap_const_logic_1,
        dout => grp_fu_142_p2);

    hls_demo_mul_31s_cud_U2 : component hls_demo_mul_31s_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 31,
        din1_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => algo_in_c_V,
        din1 => algo_in_a_V,
        ce => ap_const_logic_1,
        dout => grp_fu_206_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_preg <= ap_const_logic_0;
            else
                if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter3)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then
                addconv1_reg_265 <= addconv1_fu_193_p2;
                algo_config_cfg2_V_r_reg_255 <= algo_config_cfg2_V;
                algo_config_cfg3_V_r_reg_250 <= algo_config_cfg3_V;
                ap_pipeline_reg_pp0_iter1_addconv1_reg_265 <= addconv1_reg_265;
                ap_pipeline_reg_pp0_iter1_algo_config_cfg3_V_r_reg_250 <= algo_config_cfg3_V_r_reg_250;
                ap_pipeline_reg_pp0_iter1_tmp_2_reg_260 <= tmp_2_reg_260;
                ap_pipeline_reg_pp0_iter2_addconv1_reg_265 <= ap_pipeline_reg_pp0_iter1_addconv1_reg_265;
                ap_pipeline_reg_pp0_iter2_algo_config_cfg3_V_r_reg_250 <= ap_pipeline_reg_pp0_iter1_algo_config_cfg3_V_r_reg_250;
                ap_pipeline_reg_pp0_iter2_tmp_2_reg_260 <= ap_pipeline_reg_pp0_iter1_tmp_2_reg_260;
                ap_pipeline_reg_pp0_iter3_addconv1_reg_265 <= ap_pipeline_reg_pp0_iter2_addconv1_reg_265;
                ap_pipeline_reg_pp0_iter3_algo_config_cfg3_V_r_reg_250 <= ap_pipeline_reg_pp0_iter2_algo_config_cfg3_V_r_reg_250;
                ap_pipeline_reg_pp0_iter3_tmp_2_reg_260 <= ap_pipeline_reg_pp0_iter2_tmp_2_reg_260;
                tmp_2_reg_260 <= tmp_2_fu_169_p2;
                tmp_3_reg_285 <= grp_fu_142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))))) then
                algo_in_b_V_read_reg_234 <= algo_in_b_V;
                tmp_4_reg_240 <= tmp_4_fu_134_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                ap_pipeline_reg_pp0_iter2_tmp_s_reg_280 <= tmp_s_reg_280;
                ap_pipeline_reg_pp0_iter3_tmp_s_reg_280 <= ap_pipeline_reg_pp0_iter2_tmp_s_reg_280;
                tmp_s_reg_280 <= tmp_s_fu_215_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_pipeline_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and not((ap_const_logic_1 = ap_pipeline_idle_pp0)) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_pipeline_idle_pp0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
            when ap_ST_fsm_pp0_stage4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
            when ap_ST_fsm_pp0_stage5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    addconv1_fu_193_p2 <= std_logic_vector(signed(tmp1_cast_fu_189_p1) + signed(tmp_4_reg_240));
    algo_out_w_V <= ap_pipeline_reg_pp0_iter3_tmp_2_reg_260;
    algo_out_x_V <= ap_pipeline_reg_pp0_iter3_addconv1_reg_265;
    algo_out_y_V <= ap_pipeline_reg_pp0_iter3_tmp_s_reg_280;
    algo_out_z_V <= std_logic_vector(unsigned(tmp_5_fu_221_p1) + unsigned(tmp_10_fu_224_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5 downto 5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_preg)
    begin
        if ((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_preg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_pipeline_idle_pp0_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3))) then 
            ap_pipeline_idle_pp0 <= ap_const_logic_1;
        else 
            ap_pipeline_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_fu_148_p1 <= std_logic_vector(resize(signed(algo_in_a_V),21));

    r_V_fu_155_p2 <= std_logic_vector(signed(rhs_V_fu_152_p1) + signed(lhs_V_fu_148_p1));
        rhs_V_fu_152_p1 <= std_logic_vector(resize(signed(algo_in_b_V_read_reg_234),21));

        tmp1_cast_fu_189_p1 <= std_logic_vector(resize(signed(tmp1_fu_183_p2),18));

    tmp1_fu_183_p2 <= std_logic_vector(signed(tmp_5_cast_fu_179_p1) + signed(tmp_3_cast_fu_175_p1));
    tmp_10_fu_224_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter3_algo_config_cfg3_V_r_reg_250),9));
    tmp_1_fu_165_p1 <= algo_config_cfg1_V(25 - 1 downto 0);
    tmp_2_fu_169_p2 <= std_logic_vector(unsigned(tmp_1_fu_165_p1) + unsigned(tmp_fu_161_p1));
        tmp_3_cast_fu_175_p1 <= std_logic_vector(resize(signed(algo_in_a_V),17));

    tmp_4_fu_134_p1 <= algo_in_b_V(18 - 1 downto 0);
        tmp_5_cast_fu_179_p1 <= std_logic_vector(resize(signed(algo_config_cfg2_V),17));

    tmp_5_fu_221_p1 <= tmp_3_reg_285(9 - 1 downto 0);
        tmp_9_fu_212_p1 <= std_logic_vector(resize(signed(algo_config_cfg2_V_r_reg_255),32));

        tmp_fu_161_p1 <= std_logic_vector(resize(signed(r_V_fu_155_p2),25));

    tmp_s_fu_215_p2 <= std_logic_vector(unsigned(grp_fu_206_p2) - unsigned(tmp_9_fu_212_p1));
end behav;
