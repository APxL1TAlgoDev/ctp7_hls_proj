// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_demo,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1927-2,HLS_INPUT_CLOCK=4.160000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.170000,HLS_SYN_LAT=24,HLS_SYN_TPT=6,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1100,HLS_SYN_LUT=1151}" *)

module hls_demo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        algo_config_cfg0_V,
        algo_config_cfg1_V,
        algo_config_cfg2_V,
        algo_in_a_V,
        algo_in_b_V,
        algo_in_c_V,
        algo_in_d_V,
        algo_out_w_V,
        algo_out_x_V,
        algo_out_y_V,
        algo_out_z_V
);

parameter    ap_ST_fsm_pp0_stage0 = 6'b1;
parameter    ap_ST_fsm_pp0_stage1 = 6'b10;
parameter    ap_ST_fsm_pp0_stage2 = 6'b100;
parameter    ap_ST_fsm_pp0_stage3 = 6'b1000;
parameter    ap_ST_fsm_pp0_stage4 = 6'b10000;
parameter    ap_ST_fsm_pp0_stage5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_3 = 32'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] algo_config_cfg0_V;
input  [15:0] algo_config_cfg1_V;
input  [7:0] algo_config_cfg2_V;
input  [4:0] algo_in_a_V;
input  [19:0] algo_in_b_V;
input  [30:0] algo_in_c_V;
input  [18:0] algo_in_d_V;
output  [24:0] algo_out_w_V;
output  [17:0] algo_out_x_V;
output  [31:0] algo_out_y_V;
output  [8:0] algo_out_z_V;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
wire   [0:0] ap_CS_fsm_pp0_stage5;
reg   [19:0] algo_in_b_V_read_reg_234;
wire   [17:0] tmp_4_fu_134_p1;
reg   [17:0] tmp_4_reg_240;
reg   [7:0] algo_config_cfg2_V_r_reg_250;
reg   [7:0] ap_pipeline_reg_pp0_iter1_algo_config_cfg2_V_r_reg_250;
reg   [7:0] ap_pipeline_reg_pp0_iter2_algo_config_cfg2_V_r_reg_250;
reg   [7:0] ap_pipeline_reg_pp0_iter3_algo_config_cfg2_V_r_reg_250;
reg   [15:0] algo_config_cfg1_V_r_reg_255;
wire   [24:0] tmp_2_fu_169_p2;
reg   [24:0] tmp_2_reg_260;
reg   [24:0] ap_pipeline_reg_pp0_iter1_tmp_2_reg_260;
reg   [24:0] ap_pipeline_reg_pp0_iter2_tmp_2_reg_260;
reg   [24:0] ap_pipeline_reg_pp0_iter3_tmp_2_reg_260;
wire   [17:0] addconv1_fu_193_p2;
reg   [17:0] addconv1_reg_265;
reg   [17:0] ap_pipeline_reg_pp0_iter1_addconv1_reg_265;
reg   [17:0] ap_pipeline_reg_pp0_iter2_addconv1_reg_265;
reg   [17:0] ap_pipeline_reg_pp0_iter3_addconv1_reg_265;
wire   [31:0] tmp_s_fu_215_p2;
reg   [31:0] tmp_s_reg_280;
wire   [0:0] ap_CS_fsm_pp0_stage3;
reg   [31:0] ap_pipeline_reg_pp0_iter2_tmp_s_reg_280;
reg   [31:0] ap_pipeline_reg_pp0_iter3_tmp_s_reg_280;
wire   [8:0] grp_fu_142_p2;
reg   [8:0] tmp_3_reg_285;
reg    ap_enable_reg_pp0_iter0_preg;
wire  signed [20:0] rhs_V_fu_152_p1;
wire  signed [20:0] lhs_V_fu_148_p1;
wire   [20:0] r_V_fu_155_p2;
wire   [24:0] tmp_1_fu_165_p1;
wire  signed [24:0] tmp_fu_161_p1;
wire  signed [16:0] tmp_5_cast_fu_179_p1;
wire  signed [16:0] tmp_3_cast_fu_175_p1;
wire   [16:0] tmp1_fu_183_p2;
wire  signed [17:0] tmp1_cast_fu_189_p1;
wire   [31:0] grp_fu_206_p2;
wire  signed [31:0] tmp_9_fu_212_p1;
wire   [8:0] tmp_5_fu_221_p1;
wire   [8:0] tmp_10_fu_224_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_pipeline_idle_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'b1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_preg = 1'b0;
end

hls_demo_sdiv_20nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 24 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 9 ))
hls_demo_sdiv_20nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(algo_in_b_V),
    .din1(algo_in_d_V),
    .ce(1'b1),
    .dout(grp_fu_142_p2)
);

hls_demo_mul_31s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
hls_demo_mul_31s_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(algo_in_c_V),
    .din1(algo_in_a_V),
    .ce(1'b1),
    .dout(grp_fu_206_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_preg <= 1'b0;
    end else begin
        if (((ap_CS_fsm_pp0_stage0 == 1'b1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)))) begin
            ap_enable_reg_pp0_iter0_preg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage5)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage5)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((ap_CS_fsm_pp0_stage0 == 1'b1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & ~(1'b1 == ap_enable_reg_pp0_iter3))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage5)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage5)) begin
        addconv1_reg_265 <= addconv1_fu_193_p2;
        algo_config_cfg1_V_r_reg_255 <= algo_config_cfg1_V;
        algo_config_cfg2_V_r_reg_250 <= algo_config_cfg2_V;
        ap_pipeline_reg_pp0_iter1_addconv1_reg_265 <= addconv1_reg_265;
        ap_pipeline_reg_pp0_iter1_algo_config_cfg2_V_r_reg_250 <= algo_config_cfg2_V_r_reg_250;
        ap_pipeline_reg_pp0_iter1_tmp_2_reg_260 <= tmp_2_reg_260;
        ap_pipeline_reg_pp0_iter2_addconv1_reg_265 <= ap_pipeline_reg_pp0_iter1_addconv1_reg_265;
        ap_pipeline_reg_pp0_iter2_algo_config_cfg2_V_r_reg_250 <= ap_pipeline_reg_pp0_iter1_algo_config_cfg2_V_r_reg_250;
        ap_pipeline_reg_pp0_iter2_tmp_2_reg_260 <= ap_pipeline_reg_pp0_iter1_tmp_2_reg_260;
        ap_pipeline_reg_pp0_iter3_addconv1_reg_265 <= ap_pipeline_reg_pp0_iter2_addconv1_reg_265;
        ap_pipeline_reg_pp0_iter3_algo_config_cfg2_V_r_reg_250 <= ap_pipeline_reg_pp0_iter2_algo_config_cfg2_V_r_reg_250;
        ap_pipeline_reg_pp0_iter3_tmp_2_reg_260 <= ap_pipeline_reg_pp0_iter2_tmp_2_reg_260;
        tmp_2_reg_260 <= tmp_2_fu_169_p2;
        tmp_3_reg_285 <= grp_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)))) begin
        algo_in_b_V_read_reg_234 <= algo_in_b_V;
        tmp_4_reg_240 <= tmp_4_fu_134_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
        ap_pipeline_reg_pp0_iter2_tmp_s_reg_280 <= tmp_s_reg_280;
        ap_pipeline_reg_pp0_iter3_tmp_s_reg_280 <= ap_pipeline_reg_pp0_iter2_tmp_s_reg_280;
        tmp_s_reg_280 <= tmp_s_fu_215_p2;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((ap_CS_fsm_pp0_stage0 == 1'b1)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3))) begin
        ap_pipeline_idle_pp0 = 1'b1;
    end else begin
        ap_pipeline_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & ~(1'b1 == ap_pipeline_idle_pp0) & ~((1'b0 == ap_start) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_pipeline_idle_pp0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage2;
        end
        ap_ST_fsm_pp0_stage2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage3;
        end
        ap_ST_fsm_pp0_stage3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage4;
        end
        ap_ST_fsm_pp0_stage4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage5;
        end
        ap_ST_fsm_pp0_stage5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addconv1_fu_193_p2 = ($signed(tmp1_cast_fu_189_p1) + $signed(tmp_4_reg_240));

assign algo_out_w_V = ap_pipeline_reg_pp0_iter3_tmp_2_reg_260;

assign algo_out_x_V = ap_pipeline_reg_pp0_iter3_addconv1_reg_265;

assign algo_out_y_V = ap_pipeline_reg_pp0_iter3_tmp_s_reg_280;

assign algo_out_z_V = (tmp_5_fu_221_p1 + tmp_10_fu_224_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[ap_const_lv32_5];

assign lhs_V_fu_148_p1 = $signed(algo_in_a_V);

assign r_V_fu_155_p2 = ($signed(rhs_V_fu_152_p1) + $signed(lhs_V_fu_148_p1));

assign rhs_V_fu_152_p1 = $signed(algo_in_b_V_read_reg_234);

assign tmp1_cast_fu_189_p1 = $signed(tmp1_fu_183_p2);

assign tmp1_fu_183_p2 = ($signed(tmp_5_cast_fu_179_p1) + $signed(tmp_3_cast_fu_175_p1));

assign tmp_10_fu_224_p1 = ap_pipeline_reg_pp0_iter3_algo_config_cfg2_V_r_reg_250;

assign tmp_1_fu_165_p1 = algo_config_cfg0_V[24:0];

assign tmp_2_fu_169_p2 = ($signed(tmp_1_fu_165_p1) + $signed(tmp_fu_161_p1));

assign tmp_3_cast_fu_175_p1 = $signed(algo_in_a_V);

assign tmp_4_fu_134_p1 = algo_in_b_V[17:0];

assign tmp_5_cast_fu_179_p1 = $signed(algo_config_cfg1_V);

assign tmp_5_fu_221_p1 = tmp_3_reg_285[8:0];

assign tmp_9_fu_212_p1 = $signed(algo_config_cfg1_V_r_reg_255);

assign tmp_fu_161_p1 = $signed(r_V_fu_155_p2);

assign tmp_s_fu_215_p2 = ($signed(grp_fu_206_p2) - $signed(tmp_9_fu_212_p1));

endmodule //hls_demo
